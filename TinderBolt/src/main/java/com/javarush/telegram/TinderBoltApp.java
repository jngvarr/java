package com.javarush.telegram;

import com.javarush.telegram.ChatGPTService;
import com.javarush.telegram.DialogMode;
import com.javarush.telegram.MultiSessionTelegramBot;
import com.javarush.telegram.UserInfo;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

import java.util.ArrayList;

public class TinderBoltApp extends MultiSessionTelegramBot {
    public static final String TELEGRAM_BOT_NAME = "ThunderBot_AI_bot"; //TODO: –¥–æ–±–∞–≤—å –∏–º—è –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String TELEGRAM_BOT_TOKEN = "7378649058:AAEB4Yznyde-uZTg9DPLDkKtwgzPhJPJokM"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    public static final String OPEN_AI_TOKEN = "gpt:FUj5RRFaxyJPx8r99jGlJFkblB3TiwFfStVTSk3zPf89Bss9"; //TODO: –¥–æ–±–∞–≤—å —Ç–æ–∫–µ–Ω ChatGPT –≤ –∫–∞–≤—ã—á–∫–∞—Ö
    private final ChatGPTService chatGPTService = new ChatGPTService(OPEN_AI_TOKEN);
    private DialogMode currentMode = null;

    public TinderBoltApp() {
        super(TELEGRAM_BOT_NAME, TELEGRAM_BOT_TOKEN);
    }

    private ArrayList<String> list = new ArrayList<>();

    private UserInfo me;
    private UserInfo she;
    private int questionCount;

    @Override
    public void onUpdateEventReceived(Update update) {
        //TODO: –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –∑–¥–µ—Å—å

        String msg = getMessageText();

        if (msg.equals("/start")) {
            currentMode = DialogMode.MAIN;
            sendPhotoMessage("main");
            String text = loadMessage("main");
            sendTextMessage("–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç!!!");
            sendTextMessage(text);

            showMainMenu("–ù–∞—á–∞–ª–æ", "/start",
                    "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé", "/profile",
                    "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ \uD83E\uDD70", "/opener",
                    "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ \uD83D\uDE08", "/message",
                    "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ \uD83D\uDD25", "/date",
                    "–û–±—â–µ–Ω–∏–µ —Å chatGPT  \uD83E\uDDE0", "/gpt"
            );
            return;
        }

        if (msg.equals("/gpt")) {
            currentMode = DialogMode.GPT;
            sendPhotoMessage("gpt");
            String text = loadMessage("gpt");
//            sendTextMessage("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ gpt-—á–∞—Ç—É: ");
            sendTextMessage(text);
            return;
        }

        if (currentMode == DialogMode.GPT && !isMessageCommand()) {
            String prompt = loadPrompt("gpt");
            Message msg2 = sendTextMessage("–û–∂–∏–¥–∞–π—Ç–µ, chatGPT –∑–∞–¥—É–º–∞–ª—Å—è...");
            String answer = chatGPTService.sendMessage(prompt, msg);
            updateTextMessage(msg2, answer);
            return;
        }

        if (msg.equals("/date")) {
            currentMode = DialogMode.DATE;
            sendPhotoMessage("date");
            String text = loadMessage("date");
            sendTextButtonsMessage(text,
                    "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ", "date_grande",
                    "–ú–∞—Ä–≥–æ –†–æ–±–±–∏", "date_grande",
                    "–ó–µ–Ω–¥–µ—è", "date_zendaya",
                    "–†–∞–π–Ω –ì–æ—Å–ª–∏–Ω–≥", "date_gosling",
                    "–¢–æ–º –•–∞—Ä–¥–∏", "date_hardy");
            return;
        }

        if (currentMode == DialogMode.DATE && !isMessageCommand()) {
            String query = getCallbackQueryButtonKey();
            if (query.startsWith("date_")) {
                sendPhotoMessage(query);
                sendTextMessage(" –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä, \uD83D\uDE05 \n*–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥–µ–≤—É—à–∫—É/–ø–∞—Ä–Ω—è –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ ‚ù§\uFE0F –∑–∞ –ø—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π.* \n–ü–µ—Ä–≤—ã–π —à–∞–≥ –∑–∞ –≤–∞–º–∏: ");
                chatGPTService.setPrompt(loadPrompt(query));
                return;
            }
            Message msg2 = sendTextMessage("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...");
            updateTextMessage(msg2, chatGPTService.addMessage(msg));
            return;
        }
        if (msg.equals("/message")) {
            currentMode = DialogMode.MESSAGE;
            sendPhotoMessage("message");
            sendTextButtonsMessage("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à—É –ø–µ—Ä–µ–ø–∏—Å–∫—É",
                    "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "message_next",
                    "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ", "message_date");
            return;
        }

        if (currentMode == DialogMode.MESSAGE && !isMessageCommand()) {
            String query = getCallbackQueryButtonKey();
            if (query.startsWith("message_")) {
                String prompt = loadPrompt(query);
                String userHistory = String.join("\n\n", list);

                Message msg2 = sendTextMessage("–û–∂–∏–¥–∞–π—Ç–µ, chatGPT –∑–∞–¥—É–º–∞–ª—Å—è...");
                String answer = chatGPTService.sendMessage(prompt, userHistory);

                updateTextMessage(msg2, answer);
                return;
            }
            list.add(msg);
            return;
        }

        if (msg.equals("/profile")) {
            currentMode = DialogMode.PROFILE;
            sendPhotoMessage("profile");
            me = new UserInfo();
            sendTextMessage("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
            return;
        }

        if (currentMode == DialogMode.PROFILE && !isMessageCommand()) {
            questionCount++;
            switch (questionCount) {
                case 1:
                    me.age = msg;
                    sendTextMessage("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?");
                    return;
                case 2:
                    me.occupation = msg;
                    sendTextMessage("–ö–∞–∫–æ–µ —É –≤–∞—Å —Ö–æ–±–±–∏?");
                    return;
                case 3:
                    me.hobby = msg;
                    sendTextMessage("–ß—Ç–æ –≤–∞–º –ù–ï –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?");
                    return;
                case 4:
                    me.annoys = msg;
                    sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                    return;
                case 5:
                    me.goals = msg;

                    String aboutMyself = me.toString();
                    String prompt = loadPrompt("profile");
                    Message msg2 = sendTextMessage("–û–∂–∏–¥–∞–π—Ç–µ, chatGPT –∑–∞–¥—É–º–∞–ª—Å—è...");
                    String answer = chatGPTService.sendMessage(prompt, aboutMyself);
                    updateTextMessage(msg2, answer);
                    return;
            }
            questionCount = 0;
            return;
        }

        if (msg.equals("/opener")) {
            currentMode = DialogMode.OPENER;
            sendPhotoMessage("opener");
            she = new UserInfo();
            sendTextMessage("–ò–º—è –¥–µ–≤—É—à–∫–∏?");
            return;
        }
        if (currentMode == DialogMode.OPENER && !isMessageCommand()) {
            questionCount++;
            switch (questionCount) {
                case 1:
                    she.name = msg;
                    sendTextMessage("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?");
                    return;
                case 2:
                    she.age = msg;
                    sendTextMessage("–ö–∞–∫–æ–µ —É –Ω–µ–µ —Ö–æ–±–±–∏?");
                    return;
                case 3:
                    she.hobby = msg;
                    sendTextMessage("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?");
                    return;
                case 4:
                    she.occupation = msg;
                    sendTextMessage("–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?");
                    return;
                case 5:
                    she.goals = msg;

                    String aboutFriend = she.toString();
                    String prompt = loadPrompt("opener");
                    Message msg2 = sendTextMessage("–û–∂–∏–¥–∞–π—Ç–µ, chatGPT –∑–∞–¥—É–º–∞–ª—Å—è...");
                    String answer = chatGPTService.sendMessage(prompt, aboutFriend);
                    updateTextMessage(msg2, answer);
                    return;
            }
            questionCount = 0;
            return;
        }
        sendTextMessage("*Hello!*");
        sendTextMessage("_Hello!_");
        sendTextMessage("–í—ã –ø–∏—Å–∞–ª–∏: " + msg);

        sendTextButtonsMessage("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: ", "–°—Ç–∞—Ä—Ç", "start", "–°—Ç–æ–ø", "stop");

    }

    public static void main(String[] args) throws TelegramApiException {
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi(DefaultBotSession.class);
        telegramBotsApi.registerBot(new TinderBoltApp());
    }
}
