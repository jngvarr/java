package jngvarr.ru.pto_ackye_rzhd.telegram.handlers;

import jngvarr.ru.pto_ackye_rzhd.application.services.PhotoPathService;
import jngvarr.ru.pto_ackye_rzhd.telegram.*;
import jngvarr.ru.pto_ackye_rzhd.domain.value.OtoType;
import jngvarr.ru.pto_ackye_rzhd.domain.value.PendingPhoto;
import jngvarr.ru.pto_ackye_rzhd.domain.value.PhotoState;
import jngvarr.ru.pto_ackye_rzhd.domain.value.ProcessState;
import jngvarr.ru.pto_ackye_rzhd.application.services.PreparingPhotoService;
import jngvarr.ru.pto_ackye_rzhd.application.services.TBotConversationStateService;
import jngvarr.ru.pto_ackye_rzhd.telegram.service.TBotMessageService;
import jngvarr.ru.pto_ackye_rzhd.telegram.service.TelegramFileService;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;

import static jngvarr.ru.pto_ackye_rzhd.telegram.PtoTelegramBotContent.*;

@Data
@Slf4j
@Component
@RequiredArgsConstructor
public class PhotoMessageHandler implements UpdateHandler {

    private final TBotMessageService tBotMessageService;
    private final TelegramFileService telegramFileService;
    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    private final PreparingPhotoService preparingPhotoService;
    private final TBotConversationStateService conversationStateService;
    private final PhotoPathService photoPathService;

    @Override
    public void handle(Update update) {
        long userId = update.getMessage().getFrom().getId();
        long chatId = update.getMessage().getChatId();
        String processInfo = conversationStateService.getProcessInfo(userId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        String manualInput = update.getMessage().getCaption();

        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å
        if (!conversationStateService.getProcessStates().containsKey(userId)) {
            tBotMessageService.sendMessage(chatId, userId, "–§–æ—Ç–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–æ—Å—å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start");
            return;
        }
        tBotMessageService.sendMessage(chatId, userId, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ....");
        ProcessState currentState = conversationStateService.getProcessState(userId);
        // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        var photos = update.getMessage().getPhoto();
        var photo = photos.get(photos.size() - 1);
        String fileId = photo.getFileId();

        try {
            // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ Telegram
            File downloadedFile = telegramFileService.downloadFile(fileId);

            // 3. –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            BufferedImage bufferedImage = ImageIO.read(downloadedFile);
            if (bufferedImage == null) {
                tBotMessageService.sendMessage(chatId, userId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.");
                return;
            }

            String barcodeText = "";
            if (currentState.equals(ProcessState.WAITING_FOR_METER_PHOTO)) {
                // 4. –î–µ–∫–æ–¥–∏—Ä—É–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
                barcodeText = preparingPhotoService.decodeBarcode(bufferedImage);
                if (barcodeText == null) {
                    barcodeText = preparingPhotoService.decodeBarcode(preparingPhotoService.resizeImage(bufferedImage,
                            bufferedImage.getWidth() * 2, bufferedImage.getHeight() * 2));
                }
                if (barcodeText == null) {
                    barcodeText = preparingPhotoService.decodeBarcode(preparingPhotoService.convertToGrayscale(bufferedImage));
                }
            } else if (currentState.equals(ProcessState.WAITING_FOR_TT_PHOTO)) {
                barcodeText = processInfo.substring(0, processInfo.indexOf("_"));
            }

            // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ (—Å—á—ë—Ç—á–∏–∫, —Ç—Ç –∏–ª–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä)
            String type = switch (currentState) {
                case WAITING_FOR_METER_PHOTO -> "counter";
                case WAITING_FOR_DC_PHOTO -> "concentrator";
                case WAITING_FOR_TT_PHOTO -> "tt";
                default -> throw new IllegalStateException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: " + currentState);
            };

            // 6. –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
            PendingPhoto pendingPhoto = new PendingPhoto(type, downloadedFile.toPath(), barcodeText);
            conversationStateService.setPendingPhoto(userId, pendingPhoto);
            if (type.equals("counter")) {
                if (manualInput != null) pendingPhoto.setAdditionalInfo(manualInput.trim());

                // 7. –ï—Å–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–∞–π–¥–µ–Ω –∏ –µ—Å—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è ‚Äì —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                if (barcodeText != null && pendingPhoto.getAdditionalInfo() != null) {
                    savePhoto(userId, chatId, pendingPhoto);
                    return;
                }
                if (barcodeText == null) {
                    tBotMessageService.sendMessage(chatId, userId, "–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ü–£ –≤—Ä—É—á–Ω—É—é:");
                    conversationStateService.setProcessState(userId, ProcessState.MANUAL_INSERT_METER_NUMBER);
                    return;
                }
                if (manualInput == null) {
                    tBotMessageService.sendMessage(chatId, userId, "–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞:");
                    conversationStateService.setProcessState(userId, ProcessState.MANUAL_INSERT_METER_INDICATION);
                }

            } else if (type.equals("tt")) {
                if (manualInput != null) {
                    pendingPhoto.setAdditionalInfo(manualInput);
                    savePhoto(userId, chatId, pendingPhoto);
                } else {
                    PhotoState photoState = conversationStateService.getPhotoState(userId);
                    OtoType otoType = conversationStateService.getOtoType(userId);
                    tBotMessageService.sendMessage(chatId, userId, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞ —Ç–æ–∫–∞!! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ!");
                    sendNextPhotoInstruction(userId, chatId, photoState.getNextPhotoType(otoType));
                }
            } else {
                if (manualInput != null) {
                    pendingPhoto.setDeviceNumber(manualInput.trim());
                    savePhoto(userId, chatId, pendingPhoto);
                } else {
                    pendingPhoto.setAdditionalInfo("–î–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.");
//                    PhotoState photoState = conversationStateService.getPhotoStates().get(userId);
//                    OtoType otoType = conversationStateService.getOtoType(userId);
                    tBotMessageService.sendMessage(chatId, userId, "‚ùå –ù–æ–º–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑:");
                    conversationStateService.setProcessState(userId, ProcessState.MANUAL_INSERT_METER_NUMBER);
//                    sendNextPhotoInstruction(userId, photoState.getNextPhotoType(otoType));
                }
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: " + e.getMessage());
            tBotMessageService.sendMessage(chatId, userId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.");
        }
    }

    private void sendNextPhotoInstruction(long userId, long chatId, String nextPhotoType) {
        if (nextPhotoType == null) return;

        String message = switch (nextPhotoType) {
            case "–¥–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω" -> "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ **–î–ï–ú–û–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û** –ø—Ä–∏–±–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è.";
            case "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -> "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ **–£–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û** –ø—Ä–∏–±–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ "
                    + (conversationStateService.getProcessState(userId).equals(ProcessState.IIK_WORKS) ? "–ø–æ–∫–∞–∑–∞–Ω–∏—è" : "–µ–≥–æ –Ω–æ–º–µ—Ä");
            case "—Ñ.A" -> "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ **–¢–¢ —Ñ–∞–∑—ã A** –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä:";
            case "—Ñ.B" -> "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ **–¢–¢ —Ñ–∞–∑—ã B** –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä:";
            case "—Ñ.C" -> "üì∏ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ **–¢–¢ —Ñ–∞–∑—ã C** –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä:";
            default -> null;
        };

        if (message != null) {
            tBotMessageService.sendMessage(chatId, userId, message);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    private void handleUncontrolledPhoto(long userId, long chatId, PendingPhoto pending) {
        doSave(userId, chatId, pending);
        conversationStateService.clearPendingPhoto(userId);
        tBotMessageService.editTextAndButtons("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É.", COMPLETE_BUTTON, chatId, userId, 1);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–º–µ–Ω–æ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
     */
    private void handleChangingEquipmentPhoto(long userId, long chatId, PendingPhoto pending, OtoType operationType, PhotoState photoState) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
        String photoPhase = photoState.getNextPhotoType(operationType);
        if (photoPhase == null) {
            tBotMessageService.editMessage(chatId, userId, "‚ö† –û—à–∏–±–∫–∞: —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ.");
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
        doSave(userId, chatId, pending);
        photoState.markPhotoUploaded(photoPhase);

        addChangingInfo(pending, userId);
        conversationStateService.clearPendingPhoto(userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        if (photoState.isComplete(operationType)) {
            tBotMessageService.sendMessage(chatId, userId, "‚úÖ –í—Å–µ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
            changeReasonInput(chatId, userId, operationType);
            conversationStateService.clearPendingPhoto(userId);
        } else {
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ
            sendNextPhotoInstruction(userId, chatId, photoState.getNextPhotoType(operationType));
            setProcessState(operationType, userId);
        }
    }

    private void addChangingInfo(PendingPhoto pending, long userId) {
        if (pending.getType().equals("counter")) {
            conversationStateService.appendProcessInfo(userId, pending.getDeviceNumber() + "_" + pending.getAdditionalInfo() + "_");
        } else
            conversationStateService.appendProcessInfo(userId, pending.getType().equals("concentrator") ? pending.getDeviceNumber() + "_" : pending.getAdditionalInfo() + "_");

    }

    public void changeReasonInput(long chatId, long userId, OtoType operationType) {
        tBotMessageService.editMessage(chatId, userId, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–º–µ–Ω—ã: ");
        conversationStateService.setSequenceNumber(userId, REPLACED_EQUIPMENT_DATUM.get(operationType).size());
        conversationStateService.clearProcessState(userId);

    }

    private void setProcessState(OtoType operationType, long userId) {
        switch (operationType) {
            case METER_CHANGE -> conversationStateService.setProcessState(userId, ProcessState.WAITING_FOR_METER_PHOTO);
            case TT_CHANGE -> conversationStateService.setProcessState(userId, ProcessState.WAITING_FOR_TT_PHOTO);
            default -> {
            }
        }
    }

    public void doSave(long userId, long chatId, PendingPhoto pending) {
//        OtoType operationType = otoTypes.get(userId);
        try {
            Path userDir = Paths.get(photoPathService.createSavingPath(pending, userId, conversationStateService));

            Files.createDirectories(userDir);

            String newFileName = photoPathService.createNewFileName(pending, userId, conversationStateService);
            Path destination = userDir.resolve(newFileName);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            Files.move(pending.getTempFilePath(), destination, StandardCopyOption.REPLACE_EXISTING);
            tBotMessageService.editMessage(chatId, userId, "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–§–∞–π–ª: " + newFileName);
        } catch (IOException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è userId {}: {}", userId, e.getMessage(), e);
            tBotMessageService.sendMessage(chatId, userId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    public void savePhoto(long userId, long chatId, PendingPhoto pending) {
        OtoType operationType = conversationStateService.getOtoType(userId);
        String deviceNumber = pending.getDeviceNumber();
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ)
        PhotoState photoState = conversationStateService.getPhotoStates().computeIfAbsent(userId, key -> new PhotoState(deviceNumber));
        if (conversationStateService.getPtoFlag(userId) || !PHOTO_SUBDIRS_NAME.containsKey(operationType)) { // –¢–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ü–¢–û
            handleUncontrolledPhoto(userId, chatId, pending);
            return;
        }
        handleChangingEquipmentPhoto(userId, chatId, pending, operationType, photoState);
    }

    @Override
    public boolean canHandle(Update update) {
        return update.getMessage().hasPhoto();
    }
}
