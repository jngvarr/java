package jngvarr.ru.pto_ackye_rzhd.telegram.handlers;

import jngvarr.ru.pto_ackye_rzhd.telegram.TBot;
import lombok.Data;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Map;

import static jngvarr.ru.pto_ackye_rzhd.telegram.PtoTelegramBotContent.*;
import static jngvarr.ru.pto_ackye_rzhd.telegram.PtoTelegramBotContent.COMPLETE_BUTTON;
@Slf4j
@Component
@Data
@RequiredArgsConstructor
public class CallbackQueryHandler {

    private final TBot tBot;
    public void handleCallbackQuery(Update update) {
        String callbackData = update.getCallbackQuery().getData();
        long userId = update.getCallbackQuery().getFrom().getId();
        long chatId = update.getCallbackQuery().getMessage().getChatId();

        switch (callbackData) {
            case "mount" -> {
                tBot.editTextAndButtons(NEW_TU, MODES.get(callbackData), chatId, userId, 1);
//                sendTextMessage(NEW_TU, modes.get(callbackData), chatId, 1);
            }
            case "pto" -> {
                isPTO = true;
                 tBot.editTextAndButtons(PTO, MODES.get(callbackData), chatId, userId, 2);
//                sendTextMessage(PTO, modes.get(callbackData), chatId, 2);
            }
            case "oto" -> {
//                sendTextMessage(OTO, modes.get(callbackData), chatId, 2);
                tBot.editTextAndButtons(OTO, MODES.get(callbackData), chatId, userId, 2);
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª—è –ü–¢–û —Å—á–µ—Ç—á–∏–∫–∞ –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞
            case "ptoIIK", "ptoIVKE" -> {
                String textToSend;
                if ("ptoIIK".equals(callbackData)) {
                    textToSend = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è.";
                    processStates.put(userId, TBot.ProcessState.WAITING_FOR_METER_PHOTO);
                } else {
                    textToSend = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä.";
                    processStates.put(userId, TBot.ProcessState.WAITING_FOR_DC_PHOTO);
                }
                tBot.editMessage(chatId, userId, textToSend);
            }

            case "otoIIK", "otoIVKE" -> {
                if (callbackData.equals("otoIIK")) {
                    tBot.editTextAndButtons("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –û–¢–û –ò–ò–ö: ", OTO_IIK_BUTTONS, chatId, userId, 2);
                    processStates.put(userId, TBot.ProcessState.IIK_WORKS);
                } else {
                    tBot.editTextAndButtons("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –û–¢–û –ò–í–ö–≠: ", OTO_IVKE_BUTTONS, chatId, userId, 2);
                    processStates.put(userId, TBot.ProcessState.DC_WORKS);
                }
            }

            case "wkDrop", "setNot", "powerSupplyRestoring", "dcRestart" -> {
                switch (callbackData) {
                    case "wkDrop" -> {
                        tBot.editMessage(chatId, userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞: ");
                        otoTypes.put(userId, OtoType.WK_DROP);
                    }
                    case "dcRestart" -> {
                        tBot.editMessage(chatId, userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞: ");
                        otoTypes.put(userId, OtoType.DC_RESTART);
                    }
                    case "setNot" -> {
                        String textToSend = processStates.get(userId).equals(TBot.ProcessState.IIK_WORKS) ?
                                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞: " : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞: ";
                        tBot.editMessage(chatId, userId, textToSend);
                        otoTypes.put(userId, OtoType.SET_NOT);
                    }
                    default -> {
                        String textToSend = processStates.get(userId).equals(TBot.ProcessState.IIK_WORKS) ?
                                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞: " : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞: ";
                        tBot.editMessage(chatId, userId, textToSend);
                        otoTypes.put(userId, OtoType.SUPPLY_RESTORING);
                    }
                }
            }

            case "meterChange", "ttChange", "dcChange" -> {
                String value1 = "";
                String value2 = "";
                if (callbackData.equals("meterChange")) {
                    value1 = "meterChangeWithPhoto";
                    value2 = "meterChangeWithoutPhoto";
                } else if ("ttChange".equals(callbackData)) {
                    value1 = "ttChangeWithPhoto";
                    value2 = "ttChangeWithOutPhoto";
                } else {
                    value1 = "dcChangeWithPhoto";
                    value2 = "dcChangeWithOutPhoto";
                }
                tBot.editTextAndButtons("–í–∏–¥ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö: ",
                        Map.of("–° –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ.", value1,
                                "–ë–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ.", value2), chatId, userId, 2);
            }

            case "ttChangeWithPhoto", "ttChangeWithOutPhoto" -> {
                if ("ttChangeWithPhoto".equals(callbackData))
                    processStates.put(userId, TBot.ProcessState.WAITING_FOR_TT_PHOTO);
                tBot.editMessage(chatId, userId, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞: ");
                otoTypes.put(userId, OtoType.TT_CHANGE);
            }

            case "dcChangeWithPhoto", "dcChangeWithOutPhoto" -> {
                String textToSend = "";
                otoTypes.put(userId, OtoType.DC_CHANGE);
                if ("dcChangeWithPhoto".equals(callbackData)) {
                    processStates.put(userId, TBot.ProcessState.WAITING_FOR_DC_PHOTO);
                    textToSend = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –¥–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä: ";
                } else textToSend = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞: ";
                tBot.editMessage(chatId, userId, textToSend);
            }

            case "meterChangeWithPhoto", "meterChangeWithoutPhoto" -> {
                String textToSend = "";
                otoTypes.put(userId, OtoType.METER_CHANGE);

                if ("meterChangeWithPhoto".equals(callbackData)) {
                    textToSend = "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ **–î–ï–ú–û–ù–¢–ò–†–û–í–ê–ù–ù–û–ì–û** –ø—Ä–∏–±–æ—Ä–∞ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è.";
                    processStates.put(userId, TBot.ProcessState.WAITING_FOR_METER_PHOTO);
                } else textToSend = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–º–æ–Ω—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–±–æ—Ä–∞ —É—á–µ—Ç–∞: ";
                tBot.editMessage(chatId, userId, textToSend);
            }

            case "LOADING_COMPLETE" -> {
                if (isPTO) {
                    clearData();
                    tBot.sendMessage(chatId, userId, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start");
                } else {
                    tBot.editTextAndButtons(actionConfirmation(userId), CONFIRM_MENU, chatId, userId, 2);
                }
            }

            case "confirm", "cancel" -> {
                String textToSend;
                if ("confirm".equals(callbackData)) {
                    textToSend = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.";
                    tBot.sendMessage(chatId, userId, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...");
                    sheetsFilling(userId);
                } else {
                    textToSend = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.";
                }
                tBot.editMessage(chatId, userId, textToSend);
                clearData();
                tBot.sendMessage(chatId, userId, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ /start");
            }

            case "NOT", "lowPLC", "NOT3", "NOT2", "seasonNOT", "NOT1" -> {
                processInfo += GET_NOT.get(callbackData);
                formingOtoLog(processInfo, OtoType.SET_NOT);
                tBot.editTextAndButtons("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –ü–£ –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –≤–≤–æ–¥.", COMPLETE_BUTTON, chatId, userId, 1);
            }
            case "iikMount", "dcMount" -> {
                String textToSend = "";
                if ("iikMount".equals(callbackData)) {
                    textToSend = " –Ω–æ–º–µ—Ä –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ç–æ—Ä–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω –ò–ò–ö (–µ—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω - –≤–≤–µ–¥–∏—Ç–µ \\\"0\\\"): \"";
                    processStates.put(userId, TBot.ProcessState.IIK_MOUNT);
                } else {
                    textToSend = "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏";
                    processStates.put(userId, TBot.ProcessState.DC_MOUNT);
                }
                tBot.editMessage(chatId, userId, "–í–≤–µ–¥–∏—Ç–µ " + textToSend + ": ");
            }
            default -> tBot.sendMessage(chatId, userId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }
}
